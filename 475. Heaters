class Solution {
public:
    
    int findRadius(vector<int>& A, vector<int>& H) {
        
        sort(A.begin(), A.end());
        sort(H.begin(), H.end());
        vector<int> res(A.size(), INT_MAX); 
        
        // For each house, calculate distance to nearest RHS heater
        for (int i = 0, h = 0; i < A.size() && h < H.size(); ) {
            if (A[i] <= H[h]) { res[i] = H[h] - A[i]; i++; }
            else { h++; }
        }
        
        // For each house, calculate distance to nearest LHS heater
        for (int i = A.size()-1, h = H.size()-1; i >= 0 && h >= 0; ) {
            if (A[i] >= H[h]) { res[i] = min(res[i], A[i] - H[h]); i--; }
            else { h--; }
        }
       
        return *max_element(res.begin(), res.end());
    }
    
//     TLE on [1,5] , [2];
    
//     vector<vector<int>> merge(vector<vector<int>>& intervals) {
//         if(intervals.size()==0 || intervals.size()==1) return intervals;
//         sort(intervals.begin(),intervals.end());

//         vector<vector<int>> res;
//         res.push_back(intervals[0]);
//         for (int i = 1; i < intervals.size(); i++) {
//             if (res.back().back() < intervals[i].front()) res.push_back(intervals[i]);
//             else res.back().back() = max(res.back().back(), intervals[i].back());
//         }
//         return res;
//     }
    
//     bool check(vector<int>& ho, vector<int>& he, int rad){
//         vector<vector<int>> intervals;
//         for(int x : he)
//             intervals.push_back({x-rad, x+rad});
        
//         auto merged = merge(intervals);
        
//         int i = 0, j = 0, tmp = 0;
        
//         while(i<ho.size() && j<merged.size()){
//             if(ho[i]>=merged[j][0] && ho[i]<=merged[j][1]) i++, tmp++;
//             else j++;
//         }
        
//         return tmp==ho.size();
//     }
    
//     int findRadius(vector<int>& houses, vector<int>& heaters) {
//         sort(houses.begin(), houses.end());
//         sort(heaters.begin(), heaters.end());
        
//         int n = houses.size(), m = heaters.size();
//         int a = abs(houses[0]-heaters[0]), b = abs(houses[0]-heaters[m-1]), c = abs(houses[n-1]-heaters[0]), d = abs(houses[n-1]-heaters[m-1]);
//         int l = 1, r = max(max(a,b),max(c,d));
        
//         int ans = r;
        
//         while(l<=r){
//             int mid = l + (r-l)/2;
            
//             if(check(houses, heaters, mid)){
//                 ans = mid;
//                 r = mid-1;
//             }
//             else r = mid + 1;
//         }
        
//         return ans;
//     }
};